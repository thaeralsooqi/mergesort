#include <iostream> 
using namespace std;

void merge(int array[], int const left, int const mid,
           int const right)
{
    auto const subArrayOne = mid - left + 1;
    auto const subArrayTwo = right - mid;
 
    // Create temp arrays
    auto *leftArray = new int[subArrayOne],
         *rightArray = new int[subArrayTwo];
 
    // Copy data to temp arrays leftArray[] and rightArray[]
    for (auto i = 0; i < subArrayOne; i++)
        leftArray[i] = array[left + i];
    for (auto j = 0; j < subArrayTwo; j++)
        rightArray[j] = array[mid + 1 + j];
 
    auto indexOfSubArrayOne
        = 0, // Initial index of first sub-array
        indexOfSubArrayTwo
        = 0; // Initial index of second sub-array
    int indexOfMergedArray
        = left; // Initial index of merged array
 
    // Merge the temp arrays back into array[left..right]
    while (indexOfSubArrayOne < subArrayOne
           && indexOfSubArrayTwo < subArrayTwo) {
        if (leftArray[indexOfSubArrayOne]
            <= rightArray[indexOfSubArrayTwo]) {
            array[indexOfMergedArray]
                = leftArray[indexOfSubArrayOne];
            indexOfSubArrayOne++;
        }
        else {
            array[indexOfMergedArray]
                = rightArray[indexOfSubArrayTwo];
            indexOfSubArrayTwo++;
        }
        indexOfMergedArray++;
    }
    // Copy the remaining elements of
    // left[], if there are any
    while (indexOfSubArrayOne < subArrayOne) {
        array[indexOfMergedArray]
            = leftArray[indexOfSubArrayOne];
        indexOfSubArrayOne++;
        indexOfMergedArray++;
    }
    // Copy the remaining elements of
    // right[], if there are any
    while (indexOfSubArrayTwo < subArrayTwo) {
        array[indexOfMergedArray]
            = rightArray[indexOfSubArrayTwo];
        indexOfSubArrayTwo++;
        indexOfMergedArray++;
    }
    delete[] leftArray;
    delete[] rightArray;
}
 
// begin is for left index and end is
// right index of the sub-array
// of arr to be sorted */
void mergeSort(int array[], int const begin, int const end)
{
    if (begin >= end)
        return; // Returns recursively
 
    auto mid = begin + (end - begin) / 2;
    mergeSort(array, begin, mid);
    mergeSort(array, mid + 1, end);
    merge(array, begin, mid, end);
}

// دالة للعثور على العنصر الأكثر تكرارًا في الـ array
int findMostFrequent(int arr[], int n) {
    // فرز الـ array باستخدام merge sort
    mergeSort(arr, 0, n - 1);
    int max_count = 1; // عدد التكرارات الأكثر
    int res = arr[0]; // العدد الأكثر تكرارًا
    int curr_count = 1; // عدد
     // حلقة للبحث عن العدد الأكثر تكرارًا
    for (int i = 1; i < n; i++) {
        // إذا كان العدد الحالي يساوي العدد السابق في الـ array
        if (arr[i] == arr[i - 1])
            curr_count++;
        else {
            // إذا كان العدد الحالي لا يساوي العدد السابق في الـ array
            if (curr_count > max_count) {
                max_count = curr_count;
                res = arr[i - 1];
            }
            curr_count = 1;
        }
    }
    // التحقق من العدد الأخير في الـ array
    if (curr_count > max_count) {
        max_count = curr_count;
        res = arr[n - 1];
    }
    // إرجاع العدد الأكثر تكرارًا
    return res;
    int most_frequent = findMostFrequent(arr, n);
    cout << "The most frequent number is: " << most_frequent << endl;

    return 0;
}
int main() {
    const int SIZE = 10000;
    int arr[SIZE];
    for (int i = 0; i < SIZE; i++) {
        arr[i] = rand() % SIZE;
    }
    int most_frequent = findMostFrequent(arr, SIZE);
    cout << "The most frequent number is: " << most_frequent << endl;
    return 0;
    }
